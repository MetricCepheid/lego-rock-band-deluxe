#define AWARDS_ARRAY_1
(())
#define AWARDS_ARRAY_2
(())
{func
   choose_award
   ($player $selected_awards)
   {set $available_awards AWARDS_ARRAY_1}
   {resize $available_awards 0}
   {set $temp_awards AWARDS_ARRAY_2}
   {resize $temp_awards 0}
   {do
      ($my_player
         {beatmatch player $player})
      ($track
         {$my_player instrument})
      {foreach
         $descriptor
         (#include performance_awards.dta)
         {if
            {eval
               {elem $descriptor 0}}
            {push_back
               $available_awards
               {elem $descriptor 1}}}}
      {if_else
         {==
            {size $available_awards}
            0}
         {push_back $available_awards award_boring}
         {do
            {if
               {>
                  {size $available_awards}
                  1}
               {do
                  {resize $temp_awards 0}
                  {foreach
                     $available
                     $available_awards
                     {if
                        {!
                           {find_elem $selected_awards $available}}
                        {push_back $temp_awards $available}}}
                  {if
                     {>
                        {size $temp_awards}
                        0}
                     {set $swapper $available_awards}
                     {set $available_awards $temp_awards}
                     {set $temp_awards $swapper}}}
               {do
                  {resize $temp_awards 0}
                  {foreach
                     $available
                     $available_awards
                     {if
                        {!=
                           {{$my_player config}
                              get
                              previous_award}
                           $available}
                        {push_back $temp_awards $available}}}
                  {if
                     {>
                        {size $temp_awards}
                        0}
                     {set $swapper $available_awards}
                     {set $available_awards $temp_awards}
                     {set $temp_awards $swapper}}}}}}
      {if
         {<=
            {size $available_awards}
            0}
         {notify
            "WARNING: no performance award available!"}}
      {elem
         $available_awards
         {mod
            {$my_player score}
            {size $available_awards}}}}}
{new
   BandScreen
   endgame_waiting_screen
   (panels)
   (helpbar
      ((min_height 0)))
   (entered FALSE)
   (enter
      {set
         [entered]
         TRUE}
      {beatmatch
         foreach_active_player
         $p
         {if
            {!
               {$p is_net}}
            {$p finalize_stats}}})
   (exit
      {set
         [entered]
         FALSE})
   (poll
      {if
         {is_leader_local}
         {if
            [entered]
            {do
               ($proceed TRUE)
               {beatmatch
                  foreach_active_player
                  $p
                  {if
                     {!
                        {$p stats_finalized}}
                     {set $proceed FALSE}}}
               {if
                  {&&
                     $proceed
                     {!
                        {ui in_transition}}}
                  {ui goto_screen endgame_waiting_complete_screen}}}}})}
{new
   BandScreen
   endgame_waiting_complete_screen
   (helpbar
      ((min_height 0)))
   (enter
      {tour
         set
         win_sequence
         {meta_performer is_winning}}
      {if_else
         {gamemode get is_challenge}
         {meta_performer
            complete_challenge_song
            {challenge_mgr get_name}
            {{beatmatch main_performer}
               num_stars}
            {{beatmatch main_performer}
               score}
            {{beatmatch main_performer}
               accumulated_score}
            {{{beatmatch main_performer}
                  band}
               longest_streak}
            {{beatmatch main_performer}
               total_stars}}
         {meta_performer
            complete_song
            {{beatmatch main_performer}
               num_stars}
            {{beatmatch main_performer}
               score}
            {{beatmatch main_performer}
               accumulated_score}
            {{{beatmatch main_performer}
                  band}
               longest_streak}
            {{beatmatch main_performer}
               total_stars}}}
      {if
         {meta_performer is_last_song}
         {input_mgr set_limit kLimitSessionLeader}}
      {if
         {is_leader_local}
         {ui goto_screen endgame_advance_screen}})}
{new
   BandScreen
   endgame_advance_screen
   (helpbar
      ((min_height 0)))
   (moved_on FALSE)
   (next_screen '')
   (enter
      {if
         {is_leader_local}
         {do
            {set
               [next_screen]
               {gamemode get endgame_screen}}
            {meta_performer
               advance_song
               {{beatmatch main_performer}
                  num_stars}}
            #ifndef _SHIP
            {if
               $cheat.win_event
               {while
                  {!
                     {meta_performer is_last_song}}
                  {if_else
                     {gamemode get is_challenge}
                     {meta_performer
                        complete_challenge_song
                        {{beatmatch main_performer}
                           num_stars}
                        {{beatmatch main_performer}
                           score}
                        {{beatmatch main_performer}
                           accumulated_score}
                        {{{beatmatch main_performer}
                              band}
                           longest_streak}
                        {{beatmatch main_performer}
                           total_stars}}
                     {meta_performer
                        complete_song
                        {{beatmatch main_performer}
                           num_stars}
                        {{beatmatch main_performer}
                           score}
                        {{beatmatch main_performer}
                           accumulated_score}
                        {{{beatmatch main_performer}
                              band}
                           longest_streak}
                        {{beatmatch main_performer}
                           total_stars}}}
                  {meta_performer
                     advance_song
                     {{beatmatch main_performer}
                        num_stars}}}
               {set $cheat.win_event FALSE}}
            #endif
            {set
               [moved_on]
               FALSE}
            {if
               {'||'
                  {! $world}
                  {!
                     {$world get outro_camera_playing}}}
               {set
                  [moved_on]
                  TRUE}
               {ui
                  goto_screen
                  [next_screen]}}}})
   (poll
      {if
         {!
            [moved_on]}
         {if
            {!
               {$world get outro_camera_playing}}
            {set
               [moved_on]
               TRUE}
            {ui
               goto_screen
               [next_screen]}}})}
#define ENDGAME_PANEL_HANDLERS
((best_percentage 0)
   #ifndef HX_WII
   (submit_achievements
      {set $numUsersPerfect 0}
      {game
         foreach_local_user
         $user
         {do
            ($user_num
               {$user get_user_num})
            ($player
               {$user player})
            ($p_profile
               {profile_mgr get_save_data $user})
            {if
               {&&
                  {==
                     100
                     {int
                        {'*'
                           100
                           {$player notes_hit_fraction}}}}
                  {!
                     {gamecfg get_globalshortsongmode}}}
               {'++' $numUsersPerfect}}
            {if
               $p_profile
               {if
                  {$player got_stud_ach}
                  {achievements submit $user_num ach_skill_stud_recovery}
                  {$player clear_stud_ach}}
               {if
                  {&&
                     {==
                        {user_mgr get_num_participants}
                        4}
                     {$user can_get_achievements}}
                  {achievements submit $user_num ach_skill_all_band_complete}}
               {if_else
                  {gamemode is_h2h_arrangement}
                  {if
                     {&&
                        {==
                           {game winning_player}
                           $user_num}
                        {$user can_get_achievements}}
                     {achievements submit $user_num ach_skill_versus_victory}}
                  {if
                     {&&
                        {>=
                           {{beatmatch main_performer}
                              num_stars}
                           6}
                        {$user can_get_achievements}}
                     {achievements submit $user_num ach_skill_gold_star}}}
               {if
                  {&&
                     {==
                        100
                        {int
                           {'*'
                              100
                              {$player notes_hit_fraction}}}}
                     {!
                        {gamecfg get_globalshortsongmode}}}
                  {switch
                     {$user get_track_sym}
                     (drum
                        {if
                           {$user can_get_achievements}
                           {achievements submit $user_num ach_skill_flawless_drums}})
                     (bass
                        {if
                           {$user can_get_achievements}
                           {achievements submit $user_num ach_skill_flawless_bass}})
                     (guitar
                        {if
                           {$user can_get_achievements}
                           {achievements submit $user_num ach_skill_flawless_guitar}})
                     (vocals
                        {if
                           {$user can_get_achievements}
                           {achievements submit $user_num ach_skill_flawless_vocals}})}}
               {if
                  {&&
                     {==
                        {$user get_track_sym}
                        guitar}
                     {==
                        {$user get_difficulty}
                        kDifficultyExpert}
                     {$user can_get_achievements}}
                  {do
                     {if
                        {$player perfect_solo_with_solo_buttons}
                        {achievements submit $user_num ach_skill_guitar_solo}
                        {if
                           {==
                              {meta_performer completed_song}
                              thefinalcountdown}
                           {achievements submit $user_num ach_skill_final_countdown}}}}}}}}
      {if
         {&&
            {==
               {user_mgr get_num_participants}
               4}
            {== $numUsersPerfect 4}}
         {game
            foreach_local_user
            $user
            {if
               {$user can_get_achievements}
               {do
                  ($user_num
                     {$user get_user_num})
                  ($player
                     {$user player})
                  ($p_profile
                     {profile_mgr get_save_data $user})
                  {if
                     $p_profile
                     {achievements submit $i ach_skill_all_band_flawless}}}}}})
   #endif
   #define SELECTED_AWARDS
   (())
   (set_results
	  {set $song_text1 {song_mgr song_name {meta_performer completed_song}}}
      {if_else {!= $speedmod 1}
         {set $song_text2 {sprint $song_text1 " (" {int {'+' 0.5 {'*' $speedmod 100}}} "%)"}}
         {set $song_text2 $song_text1}}
      {heading.lbl set_localized $song_text2}
         {if_else
            {gamemode get is_challenge}
            {localize
               {challenge_mgr get_name}}
            {song_mgr
               song_name
               {meta_performer completed_song}}}
      {if
         {!
            {gamemode is_h2h_arrangement}}
         {score.lbl set_showing TRUE}
         {stars.lbl set_showing TRUE}
         {score.lbl
            set_localized
            {fmt_score
               {{beatmatch main_performer}
                  score}}}
         {stars.lbl
            set_localized
            {{beatmatch main_performer}
               star_rating}}}
      {if
         {gamemode is_h2h_arrangement}
         {rank0_text.lbl set_showing FALSE}
         {rank1_text.lbl set_showing FALSE}
         {rank0.lbl
            set_localized
            ""}
         {rank1.lbl
            set_localized
            ""}
         {do
            ($slot0
               {h2h_track_panel band_to_slot 0})
            ($slot1
               {h2h_track_panel band_to_slot 1})
            ($lbl0
               {sprintf
                  "win%d.lbl"
                  $slot0})
            ($lbl1
               {sprintf
                  "win%d.lbl"
                  $slot1})
            ($trg0
               {sprintf
                  "player%d.trg"
                  $slot0})
            ($trg1
               {sprintf
                  "player%d.trg"
                  $slot1})
            ($win_token endgame_winner)
            {if
               {gamemode get separate_parts}
               {do
                  ($max_delta_points
                     {beatmatch max_delta_points})
                  ($score0
                     {{gamecfg
                           get_player
                           {gamecfg get_player_num_from_slot_num $slot0}}
                        score})
                  ($score1
                     {{gamecfg
                           get_player
                           {gamecfg get_player_num_from_slot_num $slot1}}
                        score})
                  ($score_diff
                     {if_else
                        {< $score0 $score1}
                        {- $score1 $score0}
                        {- $score0 $score1}})
                  {set
                     $win_token
                     {cond
                        ({<
                              $score_diff
                              {/ $max_delta_points 4}}
                           h2h_narrow_win)
                        ({<
                              $score_diff
                              {/ $max_delta_points 2}}
                           h2h_win)
                        ({< $score_diff $max_delta_points}
                           h2h_big_win)
                        (TRUE h2h_huge_win)}}}}
            {switch
               {beatmatch get_result TRUE}
               (kWonTie
                  {$lbl0
                     set
                     text_token
                     {localize endgame_tie}}
                  {$lbl1
                     set
                     text_token
                     {localize endgame_tie}}
                  {$lbl0 set_showing TRUE}
                  {$lbl1 set_showing TRUE}
                  {$trg0 trigger}
                  {$trg1 trigger})
               (kWonBand0
                  {$lbl0 set text_token $win_token}
                  {$lbl0 set_showing TRUE}
                  {$lbl1 set_showing FALSE}
                  {$trg0 trigger})
               (kWonBand1
                  {$lbl1 set text_token $win_token}
                  {$lbl1 set_showing TRUE}
                  {$lbl0 set_showing FALSE}
                  {$trg1 trigger})}}}
      {do
         {resize SELECTED_AWARDS 0}
         {foreach_int
            $slot
            0
            {players.set
               size
               (objects)}
            {do
               ($pxy
                  {players.set
                     get
                     (objects $slot)})
               ($player
                  {gamecfg get_player_num_from_slot_num $slot})
               {$pxy set_showing TRUE}
               {if_else
                  {!
                     {beatmatch is_active_player $player}}
                  {if_else
                     {'||'
                        {gamemode is_h2h_arrangement}
                        {gamemode is_solo}}
                     {$pxy set_showing FALSE}
                     {do
                        {{$pxy find player.grp}
                           set_showing
                           FALSE}
                        {if
                           {$pxy exists no_player.grp}
                           {{$pxy find no_player.grp}
                              set_showing
                              TRUE}}
                        {if
                           {$pxy exists no_instrument.lbl}
                           {{$pxy find no_instrument.lbl}
                              set_localized
                              {missing_slot_to_track_icon $slot}}}}}
                  {do
                     ($pcfg
                        {game get_player_config $player})
                     {if
                        {$pxy exists no_player.grp}
                        {{$pxy find no_player.grp}
                           set_showing
                           FALSE}}
                     {{$pxy find player.grp}
                        set_showing
                        TRUE}
                     {if
                        {$pxy exists player.lbl}
                        {{$pxy find player.lbl}
                           set_localized
                           {$pcfg intro_name}}}
                     {{$pxy find instrument.lbl}
                        set_localized
                        {{$pcfg get_char}
                           track_icon
                           {$pcfg get_track_sym}}}
                     {if
                        {&&
                           {'||'
                              {gamemode is_h2h_arrangement}
                              {gamemode is_solo}}
                           {gamemode is_h2h_arrangement}}
                        {{sprintf
                              "score%i.lbl"
                              $slot}
                           set_localized
                           {if_else
                              {gamemode separate_parts}
                              ""
                              {fmt_score
                                 {{$pcfg player}
                                    score}}}}}
                     {if
                        {$pxy exists noteshit.lbl}
                        {{$pxy find noteshit.lbl}
                           set_localized
                           {sprintf
                              {localize endgame_player_noteshit_fmt}
                              {int
                                 {'*'
                                    100
                                    {{$pcfg player}
                                       notes_hit_fraction}}}}}}
                     {if
                        {$pxy exists streak.lbl}
                        {{$pxy find streak.lbl}
                           set_localized
                           {if_else
                              {==
                                 {{$pcfg player}
                                    instrument}
                                 vocals}
                              {sprintf
                                 {localize endgame_phrase_streak}
                                 {{$pcfg player}
                                    longest_streak}}
                              {sprintf
                                 {localize endgame_note_streak}
                                 {{$pcfg player}
                                    longest_streak}}}}}
                     {if
                        {$pxy exists difficulty.lbl}
                        {if_else
                           {gamecfg
                              is_novice_mode
                              {gamecfg get_player_num_from_slot_num $slot}}
                           {{$pxy find difficulty.lbl}
                              set
                              text_token
                              novice}
                           {{$pxy find difficulty.lbl}
                              set
                              text_token
                              {$pcfg get_difficulty_sym}}}}
                     {if
                        {$pxy exists award.lbl}
                        {if_else
                           {'||'
                              {gamemode is_h2h_arrangement}
                              {gamemode is_solo}}
                           {{$pxy find award.lbl}
                              set_showing
                              FALSE}
                           {do
                              ($some_award
                                 {choose_award $player SELECTED_AWARDS})
                              {push_back SELECTED_AWARDS $some_award}
                              {$pcfg set previous_award $some_award}
                              {{$pxy find award.lbl}
                                 set_localized
                                 {localize $some_award}}
                              {{$pxy find award.lbl}
                                 set_showing
                                 TRUE}}}}}}}}}))
{new
   UIPanel
   endgame_background_panel
   (file
      "test_results_background.milo")
   #ifdef HX_WII
   (allow_home_menu TRUE)
   (enter
      {rnd set_screen_dimming TRUE})
   #endif
   (SELECT_MSG
      {switch
         $component
         (quit.btn
            {post_game_loading_panel set next_screen main_screen}
            {ui pop_screen post_game_loading_screen})})
   (hide_overlay)
   (show_overlay)}
{new
   UIPanel
   endgame_background_animated_panel
   (file
      "../complete_screens_bg.milo")
   (showing FALSE)
   (enter_time 0)
   (enter
      {if_else
         {&&
            {exists challenge_mgr}
            {challenge_mgr has_challenge}}
         {$this show}
         {$this hide}})
   (show
      {$this set showing TRUE}
      {Challenge_On.trig trigger}
      {if
         {!=
            {ui bottom_screen}
            {ui current_screen}}
         {{ui bottom_screen}
            set_showing
            FALSE}})
   (hide
      {$this set showing FALSE}
      {Challenge_Off.trig trigger}
      {$this
         set
         enter_time
         {taskmgr ui_seconds}}
      {if
         {!=
            {ui bottom_screen}
            {ui current_screen}}
         {{ui bottom_screen}
            set_showing
            TRUE}})
   (poll
      {if
         {&&
            {!
               [showing]}
            {>
               {-
                  {taskmgr ui_seconds}
                  [enter_time]}
               60.0}}
         {$this show}})}
#define ENDGAME_SCREEN_HANDLERS
(#ifdef HX_XBOX
   (helpbar
      {if_else
         {'||'
            {is_leader_local}
            {gamemode get ranked}}
         {if_else
            {&&
               {gamemode get online_play_required}
               {>
                  {session num_players}
                  0}}
            ((confirm
                  {if_else
                     {tour band}
                     tour_hb_finishgig
                     endgame_hb_finishsong})
               (option endgame_hb_details))
            ((confirm
                  {if_else
                     {tour band}
                     tour_hb_finishgig
                     endgame_hb_finishsong}))}
         {if_else
            {&&
               {gamemode get online_play_required}
               {>
                  {session num_players}
                  0}}
            ((option endgame_hb_details))
            ()}})
   #else
   (helpbar
      {if_else
         {'||'
            {is_leader_local}
            {gamemode get ranked}}
         ((confirm
               {if_else
                  {tour band}
                  tour_hb_finishgig
                  endgame_hb_finishsong}))
         ()})
   #endif
   (BUTTON_DOWN_MSG
      {switch
         $action
         (kAction_Confirm
            {game
               foreach_local_user
               $user
               {if
                  {==
                     {session_mgr get_leader_num}
                     {$user get_user_num}}
                  {synth play button_select}}}
            {if_else
               {tour band}
               {ui
                  sync_screen
                  {if_else
                     {{tour event}
                        is_battle}
                     tour_botb_complete_screen
                     {if_else
                        {==
                           {{tour band}
                              event_type}
                           kTourEventChallenge}
                        tour_challenge_complete_screen
                        tour_world_complete_screen}}
                  1}
               {if_else
                  {gamemode get ranked}
                  {ui goto_screen complete_ranked_screen}
                  #ifndef HX_EE
                  {ui sync_screen complete_screen 1}
                  #else
                  {do
                     {if_else
                        {!
                           {gamemode get is_tow}}
                        {do
                           {set
                              $pcfg
                              {game
                                 get_player_config
                                 {session_mgr get_leader_num}}}
                           {if_else
                              {==
                                 {highscores
                                    is_solo_high_score
                                    {meta_performer completed_song}
                                    {$pcfg get_track_sym}
                                    {$pcfg get_difficulty_sym}
                                    {{beatmatch main_performer}
                                       score}}
                                 0}
                              {set $dest_screen complete_screen}
                              {set $dest_screen highscores_screen}}}
                        {set $dest_screen complete_screen}}
                     {ui sync_screen $dest_screen 1}}
                  #endif}})
         (kAction_Cancel
            {if_else
               {&&
                  {!
                     {is_leader_local}}
                  {!
                     {gamemode get ranked}}}
               {band_ui trigger_event remote_exit}
               kDataUnhandled})
         kDataUnhandled})
   (TRANSITION_COMPLETE_MSG
      {unless
         {is_leader_local}
         #ifdef HX_XBOX
         {helpbar option endgame_hb_details}
         #endif
         {if_else
            {gamemode get ranked}
            {helpbar confirm endgame_hb_finishsong}
            {do
               {helpbar cancel endgame_hb_leave_session}
               {do
                  ($leader_name
                     {{session_mgr get_leader_user}
                        get
                        player_name})
                  {helpbar
                     waiting
                     {symbol
                        {sprintf
                           {localize helpbar_waiting_for}
                           $leader_name}}}}}}}))